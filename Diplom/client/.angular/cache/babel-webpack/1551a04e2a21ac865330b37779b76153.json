{"ast":null,"code":"import { NeuroModuleComponent } from 'src/app/Views/neuro-module/neuro-module.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/neyros.service\";\n\nfunction NeyrosComponent_app_neuro_module_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-neuro-module\", 2);\n  }\n\n  if (rf & 2) {\n    const md_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"data\", md_r1);\n  }\n}\n\nexport let NeyrosComponent = /*#__PURE__*/(() => {\n  class NeyrosComponent {\n    constructor(ney_serv) {\n      this.ney_serv = ney_serv;\n      this.src_img = \"\";\n      this.SUMM = 0;\n      this.modules = [{\n        ip: '127.0.0.1',\n        port: '5003',\n        state: 'OFF'\n      }, {\n        ip: '127.0.0.2',\n        port: '5004',\n        state: 'OFF'\n      }, {\n        ip: '127.0.0.3',\n        port: '5005',\n        state: 'OFF'\n      }];\n      this.mod = new Map();\n      this.mod_res = new Map();\n      this.module_name = \"\";\n      this.module_ip = \"\";\n      this.module_port = 0; //\n\n      this.my_ip_pt = '10.0.0.10';\n    }\n\n    ngOnInit() {\n      //this.getImage();\n      //this.getRes();\n      //this.getRes2();\n      //this.getRes3();\n      this.ney_serv.NoteSub.subscribe(map => {\n        console.log(map);\n        this.mod = map;\n      });\n      this.ney_serv.getAllModule().subscribe(() => {//console.log(this.ney_serv.test2.get('emo').ip);\n        //this.mod = this.ney_serv.test2;\n      });\n      this.ney_serv.getLocalIP().subscribe(({\n        localIP\n      }) => {\n        this.my_ip_pt = localIP;\n        console.log('q' + localIP);\n      });\n    }\n\n    getRes() {\n      const t = this.ney_serv.getGlobalRes(\"emo\").subscribe(() => {\n        //console.log(this.ney_serv.result.data.b64_frame);\n        this.emo = this.ney_serv.statuses.get(\"emo\"); //this.getImage();\n\n        this.getRes();\n      });\n    }\n\n    getRes2() {\n      const t = this.ney_serv.getGlobalRes(\"weapon\").subscribe(() => {\n        //console.log(this.ney_serv.result.data.b64_frame);\n        this.weapon = this.ney_serv.statuses.get(\"weapon\"); //this.getImage();\n\n        this.getRes2();\n      });\n    }\n\n    getRes3() {\n      const t = this.ney_serv.getGlobalRes(\"lost\").subscribe(() => {\n        //console.log(this.ney_serv.result.data.b64_frame);\n        this.lost = this.ney_serv.statuses.get(\"lost\"); //this.getImage();\n\n        this.getRes3();\n      });\n    }\n\n    getImage() {\n      /*this.method = setInterval(\r\n        () => {\r\n            this.ney_serv.getImageWithCamera().subscribe(\r\n              ()=>{\r\n                //console.log(this.ney_serv.result.data.b64_frame);\r\n                this.src_img = \"data:image/png;base64,\"+this.ney_serv.result.data.b64_frame;\r\n            } )\r\n        },\r\n        200); */\n      const t = this.ney_serv.getImageWithCamera().subscribe(() => {\n        //console.log(this.ney_serv.result.data.b64_frame);\n        this.src_img = \"data:image/png;base64,\" + this.ney_serv.result.data.b64_frame;\n        this.getImage();\n      });\n    }\n\n    startStopModule(event) {\n      const id = parseInt(event.target.id.split('_')[0]);\n      alert(id);\n\n      if (this.modules[id].state == 'OFF') {\n        this.modules[id].state = 'ON';\n        event.target.innerHTML = 'Stop detect';\n      } else {\n        this.modules[id].state = 'OFF';\n        event.target.innerHTML = 'Start detect';\n      }\n    }\n\n    countSumm() {\n      console.log(\"summ \" + this.SUMM);\n      let summ = 0;\n\n      if (this.mod.size > 0) {\n        for (let v of this.mod) {\n          summ = summ + v[1].result;\n        }\n      }\n\n      this.SUMM = summ;\n    }\n\n    isWarning() {\n      this.SUMM = 0;\n\n      for (let e of this.mod_res) {\n        this.SUMM = this.SUMM + e[1];\n      }\n\n      return this.SUMM > 0;\n    }\n\n    getClass() {\n      if (this.isRed()) return \"light_red\";\n      if (this.isGreen()) return \"light_green\";\n      return \"light_gray\"; //return (this.isWarning())?\"light_red\":\"light_green\";\n    }\n\n    isRed() {\n      let b = false;\n\n      for (let e of this.mod_res) {\n        if (e[1] == 1) {\n          b = true;\n          break;\n        }\n      }\n\n      return b;\n    }\n\n    isGreen() {\n      let b = false;\n\n      for (let e of this.mod_res) {\n        if (e[1] == 0) {\n          b = true;\n          break;\n        }\n      }\n\n      return b;\n    }\n\n    ngOnDestroy() {\n      if (this.method) {\n        clearInterval(this.method);\n      }\n    }\n\n    addModule() {\n      if (this.mod.has(this.module_name)) {} else {\n        this.mod.set(this.module_name, new NeuroModuleComponent(this, this.ney_serv));\n        this.mod_res.set(this.module_name, -1);\n      } //this.countSumm();\n\n    }\n\n  }\n\n  NeyrosComponent.ɵfac = function NeyrosComponent_Factory(t) {\n    return new (t || NeyrosComponent)(i0.ɵɵdirectiveInject(i1.neyrosService));\n  };\n\n  NeyrosComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NeyrosComponent,\n    selectors: [[\"app-neyros\"]],\n    decls: 14,\n    vars: 8,\n    consts: [[\"id\", \"servers\"], [3, \"data\", 4, \"ngFor\", \"ngForOf\"], [3, \"data\"]],\n    template: function NeyrosComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\", 0);\n        i0.ɵɵelementStart(1, \"tr\");\n        i0.ɵɵelementStart(2, \"td\");\n        i0.ɵɵelement(3, \"div\");\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"tr\");\n        i0.ɵɵelementStart(6, \"td\");\n        i0.ɵɵtemplate(7, NeyrosComponent_app_neuro_module_7_Template, 1, 1, \"app-neuro-module\", 1);\n        i0.ɵɵpipe(8, \"keyvalue\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"tr\");\n        i0.ɵɵelementStart(10, \"td\");\n        i0.ɵɵtext(11, \" \\u043C\\u043E\\u0439 ip : \");\n        i0.ɵɵelementStart(12, \"i\");\n        i0.ɵɵtext(13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassMap(ctx.getClass());\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\"\", ctx.test, \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 6, ctx.mod));\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx.my_ip_pt);\n      }\n    },\n    styles: [\".cans[_ngcontent-%COMP%]{width:300px;height:225px;border:1px solid #005500;margin-right:0;vertical-align:top}.imgs[_ngcontent-%COMP%]{width:300px;height:225px;border:1px solid #550000;margin-left:-300px;vertical-align:top}#servers[_ngcontent-%COMP%]{border-collapse:collapse;width:100%}#servers[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{border:1px solid #000;padding:20px}.ip[_ngcontent-%COMP%]{width:200px}.port[_ngcontent-%COMP%]{width:100px}.light_gray[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:15px;border:2px solid #555555;background-color:#e9e9e9}.light_green[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:15px;border:2px solid #1b5500;background-color:#10e910}.light_red[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:15px;border:2px solid #550000;background-color:#e91010}\"]\n  });\n  return NeyrosComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}